@{
    Layout = null;
    ViewData["Title"] = "Pedro Costa AI Assistant";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
body {
    background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
    color: #f8f9fa;
    font-family: 'Inter', system-ui, sans-serif;
    min-height: 100vh;
}

.container { max-width: 900px; }

.glass-card {
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 1rem;
    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}
.glass-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 30px rgba(0,0,0,0.4);
}

.btn-tech {
    border-radius: 30px;
    font-weight: 500;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
}
.btn-tech:hover { transform: translateY(-2px); }

input, textarea {
    background-color: rgba(255,255,255,0.05) !important;
    border: 1px solid rgba(255,255,255,0.1) !important;
    color: #f8f9fa !important;
}
input::placeholder, textarea::placeholder { color: rgba(255,255,255,0.5); }

#cvReply, #messageReply, #allMessages {
    background-color: rgba(255,255,255,0.05);
    border-radius: 10px;
    padding: 1rem;
    border-left: 3px solid #0dcaf0;
}
</style>

<div class="container py-5">

    <!-- ===== HEADER ===== -->
    <div class="text-center mb-5">
        <img src="~/pics/pedmonte.jpg" class="rounded-circle mb-3 shadow" width="130" height="130" alt="Pedro Costa">
        <h1 class="fw-bold mb-2">Pedro Costa's <span class="text-info">AI Assistant</span></h1>
        <p class="text-light opacity-75">Get insights about my work, experience, or leave me a message.</p>
    </div>

    <!-- ===== 42 PROFILE ===== -->
    <div class="glass-card p-4 mb-5 text-center">
        <h3 class="text-primary mb-3"><i class="bi bi-mortarboard"></i> 42 School Journey</h3>
        <button id="toggle42Btn" class="btn btn-primary btn-tech" onclick="toggle42Profile()">Show My 42 Path</button>
        <div id="school42Profile" class="mt-3 text-start" style="display:none;"></div>
    </div>

    <!-- ===== ASK ABOUT CV ===== -->
    <div class="glass-card p-4 mb-5">
        <h3 class="text-info mb-3"><i class="bi bi-terminal"></i> Ask me</h3>
        <div class="input-group mb-3">
            <input type="text" id="cvQuestion" class="form-control" placeholder="Ask about experience, tech stack, projects..." />
            <button class="btn btn-info text-white btn-tech" onclick="askAboutCv()">Ask me</button>
        </div>
        <div id="cvReply" class="mt-2">Awaiting your question...</div>
    </div>

    <!-- ===== SEND MESSAGE ===== -->
    <div class="glass-card p-4 mb-5">
        <h3 class="text-success mb-3"><i class="bi bi-send"></i> Contact Me</h3>
        <div class="row mb-3">
            <div class="col-md-6 mb-3">
                <input type="text" id="companyName" class="form-control" placeholder="Company name" />
            </div>
            <div class="col-md-6 mb-3">
                <input type="text" id="contactName" class="form-control" placeholder="Your contact" />
            </div>
        </div>
        <textarea id="contactMessage" class="form-control mb-3" rows="4" placeholder="Type your message..."></textarea>
        <button class="btn btn-success btn-tech" onclick="sendUserMessage()">Send Message</button>
        <div id="messageReply" class="mt-3">Waiting to send message...</div>
    </div>

    <!-- ===== ADMIN MESSAGES ===== -->
    <div class="glass-card p-4">
        <h3 class="text-warning mb-3"><i class="bi bi-lock"></i> Admin Panel</h3>
        <div class="input-group mb-3" style="max-width:400px;">
            <input type="password" id="adminPassword" class="form-control" placeholder="Enter admin password" />
            <button class="btn btn-warning text-dark btn-tech" onclick="fetchAllMessages()">Enter</button>
        </div>
        <div id="allMessages"></div>
    </div>

</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
let is42Visible = false; // track profile visibility

async function toggle42Profile() {
    const div = document.getElementById("school42Profile");
    const btn = document.getElementById("toggle42Btn");

    if (is42Visible) {
        div.style.display = "none";
        btn.innerText = "Show My 42 Path";
        is42Visible = false;
    } else {
        div.style.display = "block";
        btn.innerText = "Hide Profile";
        is42Visible = true;

        // fetch profile only if empty
        if (!div.innerHTML.trim()) {
            await fetch42Profile();
        }
    }
}

async function fetch42Profile() {
    const div = document.getElementById("school42Profile");
    div.innerHTML = `<div class="spinner-border text-primary"></div> Loading...`;

    const login = "pedmonte";

    try {
        const res = await fetch(`/School42/DiagnoseProfile/${login}`);
        if (!res.ok) throw new Error(`DiagnoseProfile failed: ${res.status}`);

        const wrapper = await res.json();
        let data = wrapper.body ? (typeof wrapper.body === "string" ? JSON.parse(wrapper.body) : wrapper.body) : wrapper;

        if (!data || !data.login) throw new Error("No profile data in DiagnoseProfile response");

        render42Profile(data, div);
        localStorage.setItem("cached42Profile", JSON.stringify(data));
        console.info(`✅ Loaded 42 profile from API for ${login}`);

    } catch (err) {
        console.warn("❌ DiagnoseProfile failed, trying /Data fallback:", err);
        try {
            const fallbackRes = await fetch(`/Data/${login}.json`);
            if (!fallbackRes.ok) throw new Error(`Local JSON not found: ${fallbackRes.status}`);
            const data = await fallbackRes.json();

            if (!data || !data.login) {
                div.innerHTML = `<span class="text-warning">No local profile data found for ${login}</span>`;
                return;
            }

            render42Profile(data, div);
            localStorage.setItem("cached42Profile", JSON.stringify(data));
            console.info(`✅ Loaded 42 profile from /Data/${login}.json`);

        } catch (fallbackErr) {
            console.error("❌ Local JSON fallback failed:", fallbackErr);
            const cachedProfile = localStorage.getItem("cached42Profile");
            if (cachedProfile) {
                try {
                    const data = JSON.parse(cachedProfile);
                    render42Profile(data, div);
                    console.warn("⚠️ Using cached 42 profile as last fallback.");
                    return;
                } catch {}
            }
            div.innerHTML = `<span class="text-danger">Error loading 42 profile: ${fallbackErr.message}</span>`;
        }
    }
}

function render42Profile(data, div) {
    let html = `<h5>${data.login} (${data.usual_full_name})</h5>`;

    // ===== CURSUS =====
    if (data.cursus_users?.length) {
        html += `<h6 class="mt-3 text-info">Cursus Progress</h6>
                 <div class="accordion" id="cursusAccordion">`;

        data.cursus_users
            .filter(c => !c.cursus.name.toLowerCase().includes("piscine")) // skip piscine
            .forEach((cursus, idx) => {
                html += `
            <div class="accordion-item">
                <h2 class="accordion-header" id="cursusHeading${idx}">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#cursusCollapse${idx}" aria-expanded="false" aria-controls="cursusCollapse${idx}">
                        ${cursus.cursus.name} - Level: ${cursus.level.toFixed(2)}
                    </button>
                </h2>
                <div id="cursusCollapse${idx}" class="accordion-collapse collapse" aria-labelledby="cursusHeading${idx}" data-bs-parent="#cursusAccordion">
                    <div class="accordion-body">
                        ${cursus.skills?.length ? cursus.skills.map(s => `
                        <div class="mb-2">
                            <div class="d-flex justify-content-between">
                                <span>${s.name}</span>
                                <span>${s.level.toFixed(2)}</span>
                            </div>
                            <div class="progress" style="height:6px;">
                                <div class="progress-bar bg-info" role="progressbar" style="width:${Math.min(s.level / 21 * 100, 100)}%" aria-valuenow="${s.level.toFixed(2)}" aria-valuemin="0" aria-valuemax="21"></div>
                            </div>
                        </div>`).join('') : '<p>No skills data</p>'}
                    </div>
                </div>
            </div>`;
            });

        html += `</div>`;
    }

    // ===== PROJECTS =====
    if (data.projects_users?.length) {
        html += `<h6 class="mt-3 text-success">Projects</h6><ul class="list-unstyled">`;

        data.projects_users
            .filter(p => !(p.project.name.toLowerCase().includes("piscine"))) // skip piscine
            .sort((a, b) => new Date(b.marked_at) - new Date(a.marked_at))
            .forEach(p => {
                const mark = p.final_mark ?? 'In progress';
                const description = p.project.name ?? 'No description';

                // Add clickable project to fetch description dynamically
                html += `<li style="cursor:pointer;" title="${description}" onclick="showProjectDescription('${p.project.name}')">
                            • ${p.project.name} - <span>${mark}</span>
                         </li>`;
            });

        html += `</ul>`;
    }

    div.innerHTML = html;
}


async function showProjectDescription(projectName) {
    try {
        const res = await fetch('/Chat/DescribeProject', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'projectName=' + encodeURIComponent(projectName)
        });
        const data = await res.json();

        if (data.success) {
            alert(`${projectName}: ${data.description}`);
        } else {
            alert(`Error: ${data.description}`);
        }
    } catch (err) {
        alert("Error fetching project description: " + err);
    }
}


// --- Ask about CV ---
async function askAboutCv() {
    const replyDiv = document.getElementById("cvReply");
    const question = document.getElementById("cvQuestion").value.trim();
    if (!question) { replyDiv.innerText = "Please type your question."; return; }
    replyDiv.innerHTML = `<div class="spinner-border text-info" role="status"></div> Thinking...`;
    try {
        const res = await fetch("/Chat/Ask", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: "userMessage=" + encodeURIComponent(question)
        });
        const data = await res.json();
        replyDiv.innerHTML = `<p class="mb-0">${data.reply}</p>`;
        document.getElementById("cvQuestion").value = "";
    } catch (err) {
        replyDiv.innerHTML = `<span class="text-danger">Error: ${err}</span>`;
    }
}

// --- Send User Message ---
async function sendUserMessage() {
    const company = document.getElementById("companyName").value.trim();
    const contact = document.getElementById("contactName").value.trim();
    const message = document.getElementById("contactMessage").value.trim();
    const replyDiv = document.getElementById("messageReply");
    if (!company || !contact || !message) { replyDiv.innerText = "Please fill in all fields."; return; }
    replyDiv.innerHTML = `<div class="spinner-border text-success"></div> Sending...`;
    const userMessage = `Send a message to Company: ${company}, Contact: ${contact}, Message: ${message}`;
    try {
        const res = await fetch("/Chat/SendMessage", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: "userMessage=" + encodeURIComponent(userMessage)
        });
        const data = await res.json();
        replyDiv.innerHTML = `<span class="text-success">${data.reply}</span>`;
        document.getElementById("companyName").value = "";
        document.getElementById("contactName").value = "";
        document.getElementById("contactMessage").value = "";
    } catch (err) {
        replyDiv.innerHTML = `<span class="text-danger">Error: ${err}</span>`;
    }
}

// --- Fetch all admin messages ---
async function fetchAllMessages() {
    const replyDiv = document.getElementById("allMessages");
    const password = document.getElementById("adminPassword").value.trim();
    if (!password) { replyDiv.innerText = "Please enter the password."; return; }
    replyDiv.innerHTML = `<div class="spinner-border text-warning"></div> Loading...`;
    try {
        const formData = new URLSearchParams();
        formData.append("password", password);
        const res = await fetch("/Chat/GetAllMessages", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: formData.toString()
        });
        const data = await res.json();
        if (!data.success) {
            replyDiv.innerHTML = `<span class="text-danger">${data.reply}</span>`;
            return;
        }
        if (!data.messages.length) {
            replyDiv.innerHTML = `<p>No messages yet.</p>`;
            return;
        }
        replyDiv.innerHTML = data.messages.map(m => `
            <div class="p-3 mb-2 rounded border border-light bg-dark bg-opacity-25">
                <h6 class="text-info mb-1">${m.company} / <span class="text-light">${m.contact}</span></h6>
                <p class="mb-1">${m.message}</p>
                <small class="text-secondary">${m.date}</small>
            </div>
        `).join("");
    } catch (err) {
        replyDiv.innerHTML = `<span class="text-danger">Error: ${err}</span>`;
    }
}
</script>
